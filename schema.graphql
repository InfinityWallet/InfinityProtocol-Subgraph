type InfinityFactory @entity {
  # factory address
  id: ID!

  # pair info
  pairCount: Int!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeBNB: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityBNB: BigDecimal!

  # transactions
  txCount: BigInt!

  # as reference for new day datas
  mostLiquidTokens: [TokenDayData!]!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedBNB: BigDecimal

  # saved for historical refernce of most liquid pairs
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0")
  pairDayDataQuote: [PairDayData!]! @derivedFrom(field: "token1")
  pairBase: [Pair!]! @derivedFrom(field: "token0")
  pairQuote: [Pair!]! @derivedFrom(field: "token1")
}

type Pair @entity {
  # pair address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!

  # derived liquidity
  reserveBNB: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveBNB: BigDecimal! # used for separating per pair reserves and global

  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges

  # derived fields
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type User @entity {
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
  usdSwapped: BigDecimal!
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
  historicalSnapshots: [LiquidityPositionSnapshot]!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition! @derivedFrom(field: "historicalSnapshots")
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  token0PriceUSD: BigDecimal! # snapshot of token0 price
  token1PriceUSD: BigDecimal! # snapshot of token1 price
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  reserveUSD: BigDecimal! # snapshot of pair reserves in USD
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  mints: [Mint]!
  burns: [Burn]!
  swaps: [Swap]!
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction! @derivedFrom(field: "mints")
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  #token contract address
  token0: Token
  token1: Token

  # populated from the Mint event
  sender: Bytes
  from: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  amount0USD: BigDecimal
  amount1USD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction! @derivedFrom(field: "burns")
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  #token contract address
  token0: Token
  token1: Token

  # populated from the Burn event
  sender: Bytes
  from: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  amount0USD: BigDecimal
  amount1USD: BigDecimal

  # mark uncomplete in BNB case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction! @derivedFrom(field: "swaps")
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!

  #token contract address
  token0: Token
  token1: Token

  # populated from the Swap event
  sender: Bytes!
  from: Bytes!
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!

  amount0USD: BigDecimal
  amount1USD: BigDecimal
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  bnbPrice: BigDecimal! # price of BNB usd
}

# Data accumulated and condensed into day stats for all of Infinity Protocol
type InfinityswapDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeBNB: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyVolumeUntracked: BigDecimal!

  totalVolumeBNB: BigDecimal!
  totalLiquidityBNB: BigDecimal!
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal!

  txCount: BigInt!
}

type PairMinuteData @entity {
  id: ID!
  date: Int! # unix timestamp for start of minute
  pair: Pair!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # volume stats
  minuteVolumeToken0: BigDecimal!
  minuteVolumeToken1: BigDecimal!
  minuteVolumeUSD: BigDecimal!
  minuteTxns: BigInt!

  #kline price
  token0Open: BigDecimal!
  token0High: BigDecimal!
  token0Low: BigDecimal!
  token0Close: BigDecimal!

  #kline reserves
  reserveUSDHigh: BigDecimal!
  reserveUSDLow: BigDecimal!
  reserveUSDOpen: BigDecimal!
  reserveUSDClose: BigDecimal! #the same as just reserveUSD

  #kline totalSupply = total supply for LP historical returns
  totalSupplyHigh: BigDecimal!
  totalSupplyLow: BigDecimal!
  totalSupplyOpen: BigDecimal!
  totalSupplyClose: BigDecimal! #the same as just totalSupply
}

type PairHourData @entity {
  id: ID!
  date: Int! # unix timestamp for start of hour
  pair: Pair!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!
  hourlyVolumeToken1: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!

  #kline price
  token0Open: BigDecimal!
  token0High: BigDecimal!
  token0Low: BigDecimal!
  token0Close: BigDecimal!

  #kline reserves
  reserveUSDHigh: BigDecimal!
  reserveUSDLow: BigDecimal!
  reserveUSDOpen: BigDecimal!
  reserveUSDClose: BigDecimal! #the same as just reserveUSD

  #kline totalSupply = total supply for LP historical returns
  totalSupplyHigh: BigDecimal!
  totalSupplyLow: BigDecimal!
  totalSupplyOpen: BigDecimal!
  totalSupplyClose: BigDecimal! #the same as just totalSupply
}

# Data accumulated and condensed into day stats for each exchange
type PairDayData @entity {
  id: ID!
  date: Int!
  pair: Bytes!
  token0: Token!
  token1: Token!

  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # volume stats
  dailyVolumeToken0: BigDecimal!
  dailyVolumeToken1: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  #kline price
  token0Open: BigDecimal!
  token0High: BigDecimal!
  token0Low: BigDecimal!
  token0Close: BigDecimal!

  #kline reserves
  reserveUSDHigh: BigDecimal!
  reserveUSDLow: BigDecimal!
  reserveUSDOpen: BigDecimal!
  reserveUSDClose: BigDecimal! #the same as just reserveUSD

  #kline totalSupply = total supply for LP historical returns
  totalSupplyHigh: BigDecimal!
  totalSupplyLow: BigDecimal!
  totalSupplyOpen: BigDecimal!
  totalSupplyClose: BigDecimal! #the same as just totalSupply
}

type TokenMinuteData @entity {
  id: ID!
  date: Int!
  token: Token!

  #kline
  token0Open: BigDecimal!  # minute open price
  token0High: BigDecimal!  # minute high price
  token0Low: BigDecimal!  # minute low price
  token0Close: BigDecimal!  # minute close price

  # volume stats
  minuteVolumeToken: BigDecimal!
  minuteVolumeBNB: BigDecimal!
  minuteVolumeUSD: BigDecimal!
  minuteTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityBNB: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}

type TokenHourData @entity {
  id: ID!
  date: Int!
  token: Token!

  #kline
  token0Open: BigDecimal!  # hourly open price
  token0High: BigDecimal!  # hourly high price
  token0Low: BigDecimal!  # hourly low price
  token0Close: BigDecimal!  # hourly close price

  # volume stats
  hourlyVolumeToken: BigDecimal!
  hourlyVolumeBNB: BigDecimal!
  hourlyVolumeUSD: BigDecimal!
  hourlyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityBNB: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  #kline
  token0Open: BigDecimal!  # daily open price
  token0High: BigDecimal!  # daily high price
  token0Low: BigDecimal!  # daily low price
  token0Close: BigDecimal!  # daily close price

  # volume stats
  dailyVolumeToken: BigDecimal!
  dailyVolumeBNB: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyTxns: BigInt!

  # liquidity stats
  totalLiquidityToken: BigDecimal!
  totalLiquidityBNB: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}
